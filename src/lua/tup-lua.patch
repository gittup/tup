diff --git a/src/lua/lauxlib.c b/src/lua/lauxlib.c
index 2e989d6..c53539a 100644
--- a/src/lua/lauxlib.c
+++ b/src/lua/lauxlib.c
@@ -941,6 +941,11 @@ LUALIB_API lua_State *luaL_newstate (void) {
 }
 
 
+LUALIB_API void luaL_setoutput (lua_State *L, FILE *output) {
+	lua_setoutput(L, output);
+}
+
+
 LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver) {
   const lua_Number *v = lua_version(L);
   if (v != lua_version(NULL))
diff --git a/src/lua/lauxlib.h b/src/lua/lauxlib.h
index ac4d15f..f030e1a 100644
--- a/src/lua/lauxlib.h
+++ b/src/lua/lauxlib.h
@@ -83,6 +83,8 @@ LUALIB_API int (luaL_loadstring) (lua_State *L, const char *s);
 
 LUALIB_API lua_State *(luaL_newstate) (void);
 
+LUALIB_API void (luaL_setoutput) (lua_State *L, FILE *output);
+
 LUALIB_API int (luaL_len) (lua_State *L, int idx);
 
 LUALIB_API const char *(luaL_gsub) (lua_State *L, const char *s, const char *p,
diff --git a/src/lua/lbaselib.c b/src/lua/lbaselib.c
index 540e9a5..cb09601 100644
--- a/src/lua/lbaselib.c
+++ b/src/lua/lbaselib.c
@@ -18,6 +18,7 @@
 
 #include "lauxlib.h"
 #include "lualib.h"
+#include "lstate.h"
 
 
 static int luaB_print (lua_State *L) {
@@ -34,11 +35,11 @@ static int luaB_print (lua_State *L) {
     if (s == NULL)
       return luaL_error(L,
          LUA_QL("tostring") " must return a string to " LUA_QL("print"));
-    if (i>1) luai_writestring("\t", 1);
-    luai_writestring(s, l);
+    if (i>1) luai_writestringout("\t", 1, L);
+    luai_writestringout(s, l, L);
     lua_pop(L, 1);  /* pop result */
   }
-  luai_writeline();
+  luai_writelineout(L);
   return 0;
 }
 
diff --git a/src/lua/llex.c b/src/lua/llex.c
index 1a32e34..6994051 100644
--- a/src/lua/llex.c
+++ b/src/lua/llex.c
@@ -39,7 +39,8 @@ static const char *const luaX_tokens [] = {
     "in", "local", "nil", "not", "or", "repeat",
     "return", "then", "true", "until", "while",
     "..", "...", "==", ">=", "<=", "~=", "::", "<eof>",
-    "<number>", "<name>", "<string>"
+    "<number>", "<name>", "<string>",
+    "!=",
 };
 
 
@@ -455,6 +456,11 @@ static int llex (LexState *ls, SemInfo *seminfo) {
         if (ls->current != '=') return '~';
         else { next(ls); return TK_NE; }
       }
+      case '!': {
+        next(ls);
+        if (ls->current != '=') return '!';
+        else { next(ls); return TK_NE2; }
+      }
       case ':': {
         next(ls);
         if (ls->current != ':') return ':';
diff --git a/src/lua/llex.h b/src/lua/llex.h
index 9ca8a29..1b58512 100644
--- a/src/lua/llex.h
+++ b/src/lua/llex.h
@@ -27,7 +27,8 @@ enum RESERVED {
   TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,
   /* other terminal symbols */
   TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,
-  TK_NUMBER, TK_NAME, TK_STRING
+  TK_NUMBER, TK_NAME, TK_STRING,
+  TK_NE2,
 };
 
 /* number of reserved words */
diff --git a/src/lua/lparser.c b/src/lua/lparser.c
index d8f5b4f..fffbbea 100644
--- a/src/lua/lparser.c
+++ b/src/lua/lparser.c
@@ -1004,6 +1004,7 @@ static BinOpr getbinopr (int op) {
     case '^': return OPR_POW;
     case TK_CONCAT: return OPR_CONCAT;
     case TK_NE: return OPR_NE;
+    case TK_NE2: return OPR_NE;
     case TK_EQ: return OPR_EQ;
     case '<': return OPR_LT;
     case TK_LE: return OPR_LE;
@@ -1132,6 +1133,70 @@ static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {
   }
 }
 
+static void append_assignment (LexState *ls, struct LHS_assign *lh) {
+  FuncState * fs=ls->fs;
+  TString *appendfunc_name;
+  expdesc appendfunc;
+  expdesc var;
+  expdesc value;
+  int base;
+
+  luaX_next(ls);
+
+  checknext(ls, '=');
+
+  /* Push tup_append_assignment onto the stack */
+  /* Note: copied from function call suffixedexp -> primaryexp -> singlevar */
+  appendfunc_name = luaS_new(ls->L, "tup_append_assignment");
+  if (singlevaraux(fs, appendfunc_name, &appendfunc, 1) == VVOID) {
+    /* If tup_append_assignment isn't global, then check _ENV/locals
+     * Note: reuse appendfunc to reference _ENV temporarily
+     */
+    expdesc key;
+    /* Locate _ENV and make it an upvalue if necessary */
+    singlevaraux(fs, ls->envn, &appendfunc, 1);
+    lua_assert(appendfunc.k == VLOCAL || appendfunc.k == VUPVAL);
+    codestring(ls, &key, appendfunc_name);  /* Make func_name a constant */
+    luaK_indexed(fs, &appendfunc, &key);  /* env[varname] */
+  }
+  luaK_exp2nextreg(fs, &appendfunc);
+
+  /* Push assignment lhs as first function argument */
+  var = lh->v; /* exp2nextreg disables the expr somehow, so copy it first */
+  if (var.k == VINDEXED) {
+    /* exp2nextreg if INDEXED will try to pop/reuse the source table and
+     * index stack positions.
+     * Increase freeregs to prevent that.
+     * The conditions need to match those in and around freereg in
+     * luaK_dischargevars exactly.
+     */
+    if (!ISK(var.u.ind.idx) && var.u.ind.idx >= fs->nactvar) {
+      fs->freereg += 1;
+    }
+    if (var.u.ind.vt == VLOCAL) {
+      if (!ISK(var.u.ind.t) && var.u.ind.t >= fs->nactvar) {
+	fs->freereg += 1;
+      }
+    }
+  }
+  luaK_exp2nextreg(fs, &var);
+
+  /* Push original rhs as second function argument */
+  expr(ls, &value);
+  luaK_exp2nextreg(fs, &value);
+
+  /* Call the function */
+  /* Note: copied from funcargs */
+  lua_assert(appendfunc.k == VNONRELOC);
+  base = appendfunc.u.info;  /* base register for call */
+  init_exp(&appendfunc, VCALL,
+	   luaK_codeABC(fs, OP_CALL, base, fs->freereg - (base + 1) + 1, 2));
+  fs->freereg = base + 1;  /* call removes function and arguments and leaves
+			      (unless changed) one result */
+
+  /* Store the call result */
+  luaK_storevar(fs, &lh->v, &appendfunc);
+}
 
 static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {
   expdesc e;
@@ -1148,6 +1213,13 @@ static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {
   }
   else {  /* assignment -> `=' explist */
     int nexps;
+
+    if(nvars==1) {
+      if(ls->t.token == '+') {
+        append_assignment(ls, lh);
+        return;
+      }
+    }
     checknext(ls, '=');
     nexps = explist(ls, &e);
     if (nexps != nvars) {
@@ -1482,7 +1554,7 @@ static void exprstat (LexState *ls) {
   FuncState *fs = ls->fs;
   struct LHS_assign v;
   suffixedexp(ls, &v.v);
-  if (ls->t.token == '=' || ls->t.token == ',') { /* stat -> assignment ? */
+  if (ls->t.token == '=' || ls->t.token == ',' || ls->t.token == '+') { /* stat -> assignment ? */
     v.prev = NULL;
     assignment(ls, &v, 1);
   }
diff --git a/src/lua/lstate.c b/src/lua/lstate.c
index 207a106..a9f4cf8 100644
--- a/src/lua/lstate.c
+++ b/src/lua/lstate.c
@@ -308,10 +308,16 @@ LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {
   }
   else
     luai_userstateopen(L);
+  L->output = stdout;
   return L;
 }
 
 
+LUA_API void lua_setoutput (lua_State *L, FILE *output) {
+	L->output = output;
+}
+
+
 LUA_API void lua_close (lua_State *L) {
   L = G(L)->mainthread;  /* only the main thread can be closed */
   lua_lock(L);
diff --git a/src/lua/lstate.h b/src/lua/lstate.h
index c8a31f5..10dc632 100644
--- a/src/lua/lstate.h
+++ b/src/lua/lstate.h
@@ -12,6 +12,7 @@
 #include "lobject.h"
 #include "ltm.h"
 #include "lzio.h"
+#include <stdio.h>
 
 
 /*
@@ -173,6 +174,7 @@ struct lua_State {
   struct lua_longjmp *errorJmp;  /* current error recover point */
   ptrdiff_t errfunc;  /* current error handling function (stack index) */
   CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
+  FILE *output;
 };
 
 
diff --git a/src/lua/lua.h b/src/lua/lua.h
index eb0482b..f9e4537 100644
--- a/src/lua/lua.h
+++ b/src/lua/lua.h
@@ -9,6 +9,7 @@
 #ifndef lua_h
 #define lua_h
 
+#include <stdio.h>
 #include <stdarg.h>
 #include <stddef.h>
 
@@ -129,6 +130,7 @@ extern const char lua_ident[];
 ** state manipulation
 */
 LUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);
+LUA_API void       (lua_setoutput) (lua_State *L, FILE *output);
 LUA_API void       (lua_close) (lua_State *L);
 LUA_API lua_State *(lua_newthread) (lua_State *L);
 
diff --git a/src/lua/luaconf.h b/src/lua/luaconf.h
index df802c9..7d597bb 100644
--- a/src/lua/luaconf.h
+++ b/src/lua/luaconf.h
@@ -213,6 +213,8 @@
 #include <stdio.h>
 #define luai_writestring(s,l)	fwrite((s), sizeof(char), (l), stdout)
 #define luai_writeline()	(luai_writestring("\n", 1), fflush(stdout))
+#define luai_writestringout(s,l,ls)	fwrite((s), sizeof(char), (l), ls->output)
+#define luai_writelineout(ls)	(luai_writestringout("\n", 1, ls), fflush(ls->output))
 #endif
 
 /*
