FD_CLOEXEC flag on file descriptors?

remove var/sed commands in favor of an external client?

find a way to avoid committing after the parsing/delete stage

ldpreload: instead of a static msgbuf and mutex, just allocate msgbuf on the stack?

let partial parsings commit rather than waiting for all directories to finish successfully

update node set sym=-1 where id=blah executed even when sym is already -1?

can we have the monitor kill the updater if a file modification is detected? or restart it?
 - also what happens if there is no monitor? will the next update work properly?

kill monitor if you ctrl-c twice? (maybe SIGHUP?) that way user has to restart it, which should catch any out of place files

will cp -Rp olddir newdir break everything if olddir already has a bunch of stuff compiled in it? - try --seriously-overwrite-outputfiles flag again? I forget why I didn't finish that.

instead of keeping both files and commands in delete list, put them in separate lists. Make the command thing just a progress bar.

autoupdate doesn't autoupdate when first starting the monitor if files have changed while tup wasn't watching

put dirtree in a list for things like tup_db_select_node_by_flags to avoid callback?

don't continue down re-parse tree unless outputs of the dir have changed.

give user an option to kill an autoupdate updater

t5057 - make 'boo' dependency change update file?

progress bar looks dumb when you have numbers in the thousands because of the space between the second number and the ']', and then another space before the program

on rm -rf test-gcc, got a 'tup internal error: directory 123456 still has entries'
 - maybe related, get: tup error: Unable to find parent entry [169820] for node 219636 which is in libavcodec/x86/x86util.asm - for some reason, all the files in x86/ exist, but the x86 node itself does not.

tup 'next_dirs' - print out other directories that use files in the current dir?

name_list_entry - pointer to tup_entry?

syntax: color %flags in output

limit variable names: eg: 0-9a-zA-Z_-

kill pending jobs outright when using ctrl-c so you don't have to wait? (Or try to hit ctrl-c twice)
 - might have to worry about a file being written, but the notification of it doesn't reach tup

when you include a generated file, print path relative to command that was executed? eg: foo/bar.c includes ../blah/baz.c, print it out as ../blah/baz.c

'tup graph' shows too much info when a directory changes?

access(2) support in ldpreload?

command that reads from stdin?

move kconfig into tup?

tup show to list the Tupfile as read in the current dir?

read in +/- in order to add/remove worker threads?

rule without a : should be an error?

reverse of tup graph: give it a file, print the dir/command to create it?

autoupdate doesn't do everything in tup_init() - is find_tup_dir() needed? what   about db open?

directly support symlinks in tup? Might make t5037 usable.
 - also t5032 when building in parallel and using the 'ln -sf %f %o' pattern rather than 'rm -f %o; ln -s %f %o'

 Add %1, %2, etc to reference first, second prereq?

sqlite style graphs for parser

indent dependent dirs while parsing?

add to ghost list from parser, then fail - ghost is still reclaimed?

dynamic bins - don't let *.o match files in dynamic bins...the files must be referenced by their bin only

cache flags and write out the diff before a commit? eg: no need to add a command to modify (in order to pick up where we left off), then remove it a second later when the command executes.

replace 'tup monitor' with a tup.sh function and wrap it with valgrind

monitor should move deleted files to use dir=-1 instead of actually doing the full node deletion. The full deletion is done at next tup upd. file should be renamed to avoid unique constraint violation (name=tupid?)

monitor running, move directory away, then create new directory with similarly named files - things get screwed up? End up with files that had a 'dir' field with a tupid that was deleted, had to manually fix things
 - might be fixed in 0cca75675a?

detect stupid build tools, like yacc
 - anyway to detect tmp files that didn't use a proper tmp name generator?

get rid of 'Already parsed' messages - indent instead

rm file, re-create as dir without monitor running

can't tup upd using existing tup if tup-ldpreload.so changes, since tup-ldpreload.so is removed before running the link command. Investigate ptrace?

look at gcov, gperf

highlight += differently from = to make it obvious when a var is overridden

spaces in filenames and/or directories?

if you ctrl-c after files are deleted but before the commit finishes, the files are gone but won't be re-created

make all error messages and such pretty print on things other than 80 columns

make 'tup graph .gitignore' or 'tup graph .git/refs/foo' have a better error message
 - I was trying to do 'find . -type f | xargs tup graph' to just show files

merge windows support: http://github.com/jmckaskill/tup/tree/windows-port

actually support fchdir?

html:
  proof: no clean target
  graphs
   - re-use tup_dag_*.png and partial_dag_*.png
   - link styles
  when Tupfiles are parsed
  supported tools / how to use things like ar and ln
  files outside of tup are ignored
   - hidden files can be written to for testing (result in warnings)
   - hidden files cannot be read from
  how files are deleted
  how dependencies are described/discovered
  man pages: tup command line, tup_api
  error messages (eg: you get this error message if...)
